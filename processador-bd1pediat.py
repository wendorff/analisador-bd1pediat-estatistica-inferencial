# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1km-HmqF_9R5UE8Aij73TksQwKHMvx_Te

Aqui começo realizando o ```import``` de algumas bibliotecas úteis para a manipulação, processamento e apresentação dos dados desse script.
"""

import pandas as pd
import numpy as np
import scipy.stats

"""Utilizo uma versão do dataset ```BD1PEDIAT.xls``` hospedado no meu Drive institucional, isso me permite acessar os dados sem necessariamente precisar ter o dataset salvo em memória. Isso também me permitiu utilizar o Google Colab com mais facilidade."""

from google.colab import drive

drive.mount('/content/drive/')

"""Aqui faço o apontamento para o dataset ```BD1PEDIAT.xls``` e separo as informações por colunas."""

data = pd.read_excel(r'/content/drive/MyDrive/Datasets (1)/BD1Pediat.xls', usecols = ['T_GEST', 'PESO', 'ESTATURA', 'PC', 'PT', 'SEXO', 'SANGUE', 'RH', 'ANOMALIA'])

"""Aqui necessito instalar uma versão específica da biblitoeca ```xlrd``` para utilizar uma função da biblioteca ```scipy.stats```"""

pip install xlrd==1.2.0

"""Função ```calculaIntervaloConfiancaQualitativa``` é responsável por retornar a média, o limite inferior e o limite superior."""

def calculaIntervaloConfiancaQualitativa(data, confidence=0.95):
    a = 1.0 * np.array(data)
    n = len(a)
    m, se = np.mean(a), scipy.stats.sem(a)
    h = se * scipy.stats.t.ppf((1 + confidence) / 2., n-1)
    return m, m-h, m+h

"""Função ``` printInformacoesQuantitativas```  é responsável por printar as informações que processei para variáveis quantitativas. 

  ```T_GEST``` , ```PESO``` , ```ESTATURA```, ```PC``` , ```PT``` 
"""

def printInformacoesQuantitativas(data):
  # Média encontrada para a coluna quantitativa passada por referência
  print("Média encontrada: ", np.average(data))
  # Desvio Padrão para a coluna quantitativa passada por referência
  print("Desvio padrão encontrado", np.std(data))
  # Confiança de 95% para para a coluna quantitativa passada por referência
  print("Intervalo de confiança 95% encontrado: ", calculaIntervaloConfiancaQualitativa(data))

"""Função ```calculaFrequenciaRelativa```  retorna a frequência relativa para variaveis qualitativas. 

```SEXO```, ```SANGUE```, ```RH```, ```ANOMALIA``` 
"""

def calculaFrequenciaRelativa(list_of_chars):
    #find relative frequency
    calculaFrequenciaRelativa = {}
    for char in list_of_chars:
        if char in calculaFrequenciaRelativa:
            calculaFrequenciaRelativa[char] += 1
        else:
            calculaFrequenciaRelativa[char] = 1
    for char in calculaFrequenciaRelativa:
        calculaFrequenciaRelativa[char] = calculaFrequenciaRelativa[char]/len(list_of_chars)
    return calculaFrequenciaRelativa

def calculaIntervaloConfiancaQualitativo(list_of_words):
    #calculate relative frequency
    calculaFrequenciaRelativa = calculaFrequenciaRelativa(list_of_words)
    #calculate confidence interval
    calculaIntervaloConfiancaQualitativo = 1.96 * (calculaFrequenciaRelativa * (1 - calculaFrequenciaRelativa)) / len(list_of_words)
    return calculaIntervaloConfiancaQualitativo

print("Informações sobre T_GEST (Tempo de gestação, em dias)")
printInformacoesQuantitativas(data['T_GEST'])

print("Informações sobre PESO (Peso do recem anscido, em kg)")
printInformacoesQuantitativas(data['PESO'])

print("Informações sobre ESTATURA (Altura do recém nascido, em cm)")
printInformacoesQuantitativas(data['ESTATURA'])

print("Informações sobre PC (perímetro da cabeça ao nascer, em cm)")
printInformacoesQuantitativas(data['PC'])

print("Informações sobre PT (perímetro do tórax ao nascer, em cm)")
printInformacoesQuantitativas(data['PT'])

freqRelativaSexo = pd.Series(data['SEXO']).value_counts()
print(freqRelativaSexo/len(data['SEXO']))
calculaFrequenciaRelativa(data['SEXO'].tolist())
print(freqRelativaSexo)

freqRelativaSangue = pd.Series(data['SANGUE']).value_counts()
print(freqRelativaSangue/len(data['SANGUE']))
print(freqRelativaSangue)

freqRelativaRH = pd.Series(data['RH']).value_counts()
print(freqRelativaRH/len(data['RH'])) 
print(freqRelativaRH)

freqRelativaAnomalia = pd.Series(data['ANOMALIA']).value_counts()
print(freqRelativaAnomalia/len(data['ANOMALIA']))
print(freqRelativaAnomalia)